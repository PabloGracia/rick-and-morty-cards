{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","react_default","a","createElement","className","alt","src","character","image","height","width","name","status","CardList","characters","map","card_component_Card","SearchBox","type","placeholder","onChange","handleChange","App","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","event","setState","search","target","value","state","bind","assertThisInitialized","inherits","createClass","key","_this2","fetch","then","response","json","json_response","results","_this3","search_box_component_SearchBox","card_list_component_CardList","filter","toLocaleLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAIaA,eAA4C,SAAAC,GACvD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAI,YACJC,IAAKN,EAAMO,UAAUC,MACrBC,OAAO,MACPC,MAAM,QAERT,EAAAC,EAAAC,cAAA,mBAAWH,EAAMO,UAAUI,MAC3BV,EAAAC,EAAAC,cAAA,oBAAYH,EAAMO,UAAUK,WCTrBC,SAER,SAAAb,GACH,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMc,WAAWC,IAAI,SAAAR,GACpB,OAAON,EAAAC,EAAAC,cAACa,EAAD,CAAMT,UAAWA,SCJnBU,SAA6C,SAAAjB,GACxD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEe,KAAK,SACLC,YAAanB,EAAMmB,YACnBC,SAAUpB,EAAMqB,kBC0DTC,EA9Cf,SAAAC,GAIE,SAAAD,EAAYtB,GAAW,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAM3B,KAQR+B,kBAAoB,SAACC,GACnBR,EAAKS,SAAS,CAAEC,OAAQF,EAAMG,OAAOC,SARrCZ,EAAKa,MAAQ,CACXvB,WAAY,GACZoB,OAAQ,IAEVV,EAAKO,kBAAkBO,KAAvBb,OAAAc,EAAA,EAAAd,CAAAD,IANqBA,EAJzB,OAAAC,OAAAe,EAAA,EAAAf,CAAAH,EAAAC,GAAAE,OAAAgB,EAAA,EAAAhB,CAAAH,EAAA,EAAAoB,IAAA,oBAAAN,MAAA,WAiBsB,IAAAO,EAAAhB,KAClBiB,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKV,SAAS,CAAEnB,WAAYkC,EAAcC,cArBlD,CAAAP,IAAA,SAAAN,MAAA,WAwBW,IAAAc,EAAAvB,KACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACgD,EAAD,CACEhC,YAAY,mBACZE,aAAcM,KAAKI,oBAErB9B,EAAAC,EAAAC,cAACiD,EAAD,CACEtC,WACEa,KAAKU,MAAMH,OACPP,KAAKU,MAAMvB,WAAWuC,OAAO,SAAA9C,GAAS,OACpCA,EAAUI,KAAK2C,oBAAoBC,SAASL,EAAKb,MAAMH,UAEzDP,KAAKU,MAAMvB,kBAtC3BQ,EAAA,CAAyBkC,IAAMC,WCbXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.b9ae7168.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\nimport { ICharacter } from \"../../App\";\r\n\r\nexport const Card: React.FC<{ character: ICharacter }> = props => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"character\"\r\n        src={props.character.image}\r\n        height=\"200\"\r\n        width=\"200\"\r\n      />\r\n      <h2>Name: {props.character.name}</h2>\r\n      <p>Status: {props.character.status}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport { ICharacter } from \"../../App\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList: React.FunctionComponent<{\r\n  characters: ICharacter[];\r\n}> = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.characters.map(character => {\r\n        return <Card character={character} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent } from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\ninterface IProps {\r\n  placeholder: string;\r\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\nexport const SearchBox: React.FunctionComponent<IProps> = props => {\r\n  return (\r\n    <div className=\"search-box\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder={props.placeholder}\r\n        onChange={props.handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nexport interface ICharacter {\n  id: number;\n  name: string;\n  status: string;\n  species: string;\n  gender: string;\n  origin: {\n    name: string;\n    url: string;\n  };\n  location: {\n    name: string;\n    url: string;\n  };\n  image: string;\n  episode: Array<string>;\n  url: string;\n  created: string;\n}\n\nexport class App extends React.Component<\n  {},\n  { characters: ICharacter[]; search: string }\n> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      characters: [],\n      search: \"\"\n    };\n    this.handleInputChange.bind(this);\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://rickandmortyapi.com/api/character/\")\n      .then(response => response.json())\n      .then(json_response => {\n        this.setState({ characters: json_response.results });\n      });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Rick and Morty Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search character\"\n          handleChange={this.handleInputChange}\n        />\n        <CardList\n          characters={\n            this.state.search\n              ? this.state.characters.filter(character =>\n                  character.name.toLocaleLowerCase().includes(this.state.search)\n                )\n              : this.state.characters\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}